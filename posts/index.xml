<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Md. Jehadul Karim (Sabit)</title>
        <link>https://MJKSabit.github.io/posts/</link>
        <description>Recent content in Posts on Md. Jehadul Karim (Sabit)</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 02 Dec 2020 22:17:02 +0600</lastBuildDate>
        <atom:link href="https://MJKSabit.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Java Socket Networking</title>
            <link>https://MJKSabit.github.io/posts/java-socket-networking/</link>
            <pubDate>Wed, 02 Dec 2020 22:17:02 +0600</pubDate>
            
            <guid>https://MJKSabit.github.io/posts/java-socket-networking/</guid>
            <description>Networking  By Md. Jehadul Karim
 Prerequisite:
 Threading  Recommended:
 Input &amp;amp; Output Stream  So, how do you do Networking. Lets dive into the basics of networking.
Basics of Networking First of all you need to understand how networking is done. There are two types of connection (as far as I know):
 TCP UDP  In this tutorial, I am only going to talk about TCP Networking.</description>
            <content type="html"><![CDATA[<h1 id="networking">Networking</h1>
<blockquote>
<p>By <a href="www.github.com/MJKSabit">Md. Jehadul Karim</a></p>
</blockquote>
<p>Prerequisite:</p>
<ul>
<li>Threading</li>
</ul>
<p>Recommended:</p>
<ul>
<li>Input &amp; Output Stream</li>
</ul>
<p>So, how do you do Networking. Lets dive into the <strong>basics of networking</strong>.</p>
<h2 id="basics-of-networking">Basics of Networking</h2>
<p>First of all you need to understand how networking is done. There are two types of connection (as far as I know):</p>
<ol>
<li>TCP</li>
<li>UDP</li>
</ol>
<p>In this tutorial, I am only going to talk about <strong>TCP Networking</strong>. In TCP networking there exists a <strong>server</strong> which creates connection between two sockets. <strong>A network connection</strong> should contain <strong>two sockets</strong>, one at <strong>Server-End</strong> and other at <strong>Client-End</strong>.</p>
<h2 id="socket-networking">Socket Networking</h2>
<p>A <strong>Socket</strong> exposes some interface to send and receive data from one socket to other when <strong>a network</strong> is established. To relate, you can consider <code>cin</code> as the interface to get (<em>read</em>) and <code>cout</code> as the interface to write (<em>send</em>).</p>
<h3 id="server-client-networking">Server-Client Networking</h3>
<p>A client can not directly communicate with other client directly. They need to <strong>get connected first</strong>. After getting connected, there will be <strong>two Sockets</strong> at both ends (<em>Server and Client</em>).</p>
<blockquote>
<p>There is no difference between a server-side socket and client-side socket.</p>
</blockquote>
<p>The socket read/write interface are relative to the side socket is in. These are not absolute. For example, If I <strong>write</strong> on one of the sockets (eg. Client-SIde), then I must <strong>read</strong> from the other socket (eg. Server-Side). You should not confuse to use <strong>write</strong> interface on both side to access the data.</p>
<table>
<thead>
<tr>
<th>Socket On One Side</th>
<th align="center"></th>
<th>Socket On other Side</th>
</tr>
</thead>
<tbody>
<tr>
<td>write(data)</td>
<td align="center">&ndash;&gt;</td>
<td>read() : returns data</td>
</tr>
<tr>
<td>read() : returns data</td>
<td align="center">&lt;&ndash;</td>
<td>write(data)</td>
</tr>
</tbody>
</table>
<h1 id="socket-networking-in-java">Socket Networking in JAVA</h1>
<hr>
<h2 id="prework">Prework</h2>
<p>Before using socket, we have to connect two sockets at two ends. The basic way of doing this is to <strong>wait for other to connect</strong> (<em>listening</em>). It is done at the server side. To listen for a connection in server side, we have to use a java class, <code>ServerSocket</code>, Using this class we can start a connection and two sockets to communicate with.</p>
<h3 id="initialization">Initialization</h3>
<p>To start a ServerSocket, you first have to create an instance of it with the <strong>port</strong> you want to serve to.
<code>ServerSocket server = new ServerSocket(PORT);</code></p>
<blockquote>
<p>PORT can be any positive integer from 0 to 2^16-1, But my suggestion would be using port higher than 10000. You have to <strong>note down the PORT</strong> as the same PORT will be used in the client side.</p>
</blockquote>
<h3 id="connecting">Connecting&hellip;</h3>
<p>After the instance is being created, you can now <strong>wait</strong> for client to be connected on the same port.
<code>Socket clientSocket = server.accept();</code></p>
<h3 id="connected">Connected</h3>
<p>When a client is connected to the server, we will have the the socket in the <code>clientSocket</code> and use it to send and receive data to and from client.</p>
<h3 id="close-serversocket">Close ServerSocket</h3>
<p>You should always close the <code>ServerSocket</code> to release the PORT to be used by other applications by calling:
<code>server.close()</code></p>
<h3 id="connect-from-client-side">Connect from Client Side</h3>
<p>Just initialize a <code>Socket</code> instance, just use <code>127.0.0.1</code> as hostname and the same PORT that was used in Server Side.
<code>Socket socketServer = new Socket(&quot;127.0.0.1&quot;, PORT);</code></p>
<h3 id="current-code">Current Code</h3>
<p><code>Server.java</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> java.net.ServerSocket<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> java.net.Socket<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Server</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> PORT <span style="color:#f92672">=</span> 12345<span style="color:#f92672">;</span>
    
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        ServerSocket server <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
        Socket clientSocket <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
        <span style="color:#66d9ef">try</span><span style="color:#f92672">{</span>
        	server <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ServerSocket<span style="color:#f92672">(</span>PORT<span style="color:#f92672">);</span>
        	clientSocket <span style="color:#f92672">=</span> server<span style="color:#f92672">.</span><span style="color:#a6e22e">accept</span><span style="color:#f92672">();</span>
            server<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
           	System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Client Connected&#34;</span><span style="color:#f92672">);</span>
            <span style="color:#75715e">// DO YOUR WORK WITH SOCKET HERE
</span><span style="color:#75715e"></span>            <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>            <span style="color:#75715e">// THEN CLOSE IT
</span><span style="color:#75715e"></span>            clientSocket<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Ignored for Simplicity
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Free up Resources by CLOSING them
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p><code>Client.java</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> java.net.Socket<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Client</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> PORT <span style="color:#f92672">=</span> 12345<span style="color:#f92672">;</span>
	
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    	<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
            Socket socketServer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Socket<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;127.0.0.1&#34;</span><span style="color:#f92672">,</span> PORT<span style="color:#f92672">);</span>
            <span style="color:#75715e">// DO YOUR WORK WITH SOCKET HERE
</span><span style="color:#75715e"></span>            <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>            <span style="color:#75715e">// THEN CLOSE IT
</span><span style="color:#75715e"></span>            socketServer<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Ignored for Simplicity
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Free up Resources by CLOSING them
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>


</code></pre></div><blockquote>
<p>You must <strong>allow parallel run</strong> from [ Run ] &gt; [ Edit Configuration ] and run two classes in separate projects as they will have be run simultaneously</p>
<ol>
<li>Run Server First</li>
<li>Then Run Client</li>
</ol>
</blockquote>
<h2 id="socket">Socket</h2>
<p>Networking through <code>Socket</code> includes <strong>Sending</strong> and <strong>Receiving</strong> data as I have mentioned earlier. This can be done using <code>OutputStream</code> and <code>InputStream</code>. <code>Socket</code> class has methods for directly accessing these steams.</p>
<p><code>InputSteam in = clientSocket.getInputSteam();</code>
<code>OutputStream out = serverSocket.getOutputSteam();</code></p>
<p><code>OutputStream</code> and <code>InputStream</code> has limited numbers of methods to send and receive data. Simple <code>in.read()</code> will read an <code>int</code> and <code>out.write(INT)</code> will send an <code>INT</code> to the other side.</p>
<blockquote>
<p>Steams must be <strong>closed</strong> by calling <code>close()</code></p>
</blockquote>
<h3 id="current-code-1">Current Code</h3>
<p><code>Server.java</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> java.net.ServerSocket<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> java.net.Socket<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Server</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> PORT <span style="color:#f92672">=</span> 12345<span style="color:#f92672">;</span>
    
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        ServerSocket server <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
        Socket clientSocket <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
        <span style="color:#66d9ef">try</span><span style="color:#f92672">{</span>
        	server <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ServerSocket<span style="color:#f92672">(</span>PORT<span style="color:#f92672">);</span>
        	clientSocket <span style="color:#f92672">=</span> server<span style="color:#f92672">.</span><span style="color:#a6e22e">accept</span><span style="color:#f92672">();</span>
            server<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
           	System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Client Connected&#34;</span><span style="color:#f92672">);</span>
            <span style="color:#75715e">// DO YOUR WORK WITH SOCKET HERE
</span><span style="color:#75715e"></span>            <span style="color:#75715e">// Getting I/O Stream
</span><span style="color:#75715e"></span>            OutputStream out <span style="color:#f92672">=</span> clientSocket<span style="color:#f92672">.</span><span style="color:#a6e22e">getOutputSteam</span><span style="color:#f92672">();</span>
            InputStream in <span style="color:#f92672">=</span> clientSocket<span style="color:#f92672">.</span><span style="color:#a6e22e">getInputSteam</span><span style="color:#f92672">();</span>
            
            <span style="color:#75715e">// Simple Integer Value Sending...
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">int</span> DATA <span style="color:#f92672">=</span> 12345<span style="color:#f92672">;</span>
            out<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>DATA<span style="color:#f92672">);</span> <span style="color:#75715e">// CHANGE 12345 to test
</span><span style="color:#75715e"></span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;DATA sent: &#34;</span> <span style="color:#f92672">+</span> DATA<span style="color:#f92672">);</span>
            
            <span style="color:#75715e">// THEN CLOSE IT
</span><span style="color:#75715e"></span>            in<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
            out<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
            clientSocket<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Ignored for Simplicity
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Free up Resources by CLOSING them
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p><code>Client.java</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> java.net.Socket<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Client</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> PORT <span style="color:#f92672">=</span> 12345<span style="color:#f92672">;</span>
	
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    	<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
            Socket socketServer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Socket<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;127.0.0.1&#34;</span><span style="color:#f92672">,</span> PORT<span style="color:#f92672">);</span>
            <span style="color:#75715e">// DO YOUR WORK WITH SOCKET HERE
</span><span style="color:#75715e"></span>            
            <span style="color:#75715e">// Getting I/O Stream
</span><span style="color:#75715e"></span>            OutputStream out <span style="color:#f92672">=</span> socketClient<span style="color:#f92672">.</span><span style="color:#a6e22e">getOutputSteam</span><span style="color:#f92672">();</span>
            InputStream in <span style="color:#f92672">=</span> socketClient<span style="color:#f92672">.</span><span style="color:#a6e22e">getInputSteam</span><span style="color:#f92672">();</span>
            
            <span style="color:#75715e">// Simple Integer Value Sending...
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">int</span> DATA<span style="color:#f92672">;</span>
            DATA <span style="color:#f92672">=</span> in<span style="color:#f92672">.</span><span style="color:#a6e22e">read</span><span style="color:#f92672">();</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;DATA received: &#34;</span> <span style="color:#f92672">+</span> DATA<span style="color:#f92672">);</span>
            
            <span style="color:#75715e">// THEN CLOSE IT
</span><span style="color:#75715e"></span>            in<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
            out<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
            socketServer<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Ignored for Simplicity
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Free up Resources by CLOSING them
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>


</code></pre></div><h2 id="reader--writer">Reader &amp; Writer</h2>
<p>You normally don&rsquo;t use Input &amp; Output Stream directly. We wrap them within another class to get some extra functionalities. For example, we could have directly used <code>System.in</code> instead of using <code>new Scanner(System.in)</code>, But the <code>Scanner</code> provides much more functionalities to access data.</p>
<p>Here we will use <code>BufferedReader</code> and <code>BufferedWriter</code>. They provide functions to directly send and receive <code>String</code> over the I/O Streams.</p>
<h3 id="bufferedreader">BufferedReader</h3>
<p>This one is used with <code>InputStream</code>, to get an instance of this, use:
<code>BufferedReader reader = new BufferedReader(new InputStreamReader(in));</code></p>
<p><code>BufferedReader</code> has a method <code>readLine()</code> to directly read a <code>String</code> from the stream.
<code>String input = reader.readLine();</code></p>
<h3 id="bufferedwriter">BufferedWriter</h3>
<p>This one is used with <code>OutputStream</code>, to get an instance of this, use:
<code>BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out));</code></p>
<p><code>BufferedReader</code> has a method <code>write(String)</code> to directly send a <code>String</code> from the stream. Be careful to include a <code>\n</code> in the end of the String or call <code>newLine()</code> method, else <code>readLine()</code> from the otherside will not be able to read the steam,</p>
<p><code>writer.write(&quot;Hello World!&quot;);</code>
<code>write.newLine()</code></p>
<h3 id="current-code-2">Current Code</h3>
<p><code>Server.java</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> java.net.ServerSocket<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> java.net.Socket<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Server</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> PORT <span style="color:#f92672">=</span> 12345<span style="color:#f92672">;</span>
    
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        ServerSocket server <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
        Socket clientSocket <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
        <span style="color:#66d9ef">try</span><span style="color:#f92672">{</span>
        	server <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ServerSocket<span style="color:#f92672">(</span>PORT<span style="color:#f92672">);</span>
        	clientSocket <span style="color:#f92672">=</span> server<span style="color:#f92672">.</span><span style="color:#a6e22e">accept</span><span style="color:#f92672">();</span>
            server<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
           	System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Client Connected&#34;</span><span style="color:#f92672">);</span>
            <span style="color:#75715e">// DO YOUR WORK WITH SOCKET HERE
</span><span style="color:#75715e"></span>            <span style="color:#75715e">// Getting I/O Stream
</span><span style="color:#75715e"></span>            OutputStream out <span style="color:#f92672">=</span> clientSocket<span style="color:#f92672">.</span><span style="color:#a6e22e">getOutputSteam</span><span style="color:#f92672">();</span>
            InputStream in <span style="color:#f92672">=</span> clientSocket<span style="color:#f92672">.</span><span style="color:#a6e22e">getInputSteam</span><span style="color:#f92672">();</span>
            
            <span style="color:#75715e">// Simple String Value Sending...
</span><span style="color:#75715e"></span>            BufferedWriter writer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BufferedWriter<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> InputStreamWriter<span style="color:#f92672">(</span>out<span style="color:#f92672">));</span>
            writer<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hello World from Server.&#34;</span><span style="color:#f92672">);</span>
            writer<span style="color:#f92672">.</span><span style="color:#a6e22e">newLine</span><span style="color:#f92672">();</span>
            
            <span style="color:#75715e">// THEN CLOSE IT
</span><span style="color:#75715e"></span>            in<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
            out<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
            clientSocket<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Ignored for Simplicity
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Free up Resources by CLOSING them
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p><code>Client.java</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> java.net.Socket<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Client</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> PORT <span style="color:#f92672">=</span> 12345<span style="color:#f92672">;</span>
	
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    	<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
            Socket socketServer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Socket<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;127.0.0.1&#34;</span><span style="color:#f92672">,</span> PORT<span style="color:#f92672">);</span>
            <span style="color:#75715e">// DO YOUR WORK WITH SOCKET HERE
</span><span style="color:#75715e"></span>            
            <span style="color:#75715e">// Getting I/O Stream
</span><span style="color:#75715e"></span>            OutputStream out <span style="color:#f92672">=</span> socketClient<span style="color:#f92672">.</span><span style="color:#a6e22e">getOutputSteam</span><span style="color:#f92672">();</span>
            InputStream in <span style="color:#f92672">=</span> socketClient<span style="color:#f92672">.</span><span style="color:#a6e22e">getInputSteam</span><span style="color:#f92672">();</span>
            
            <span style="color:#75715e">// Simple Integer Value Sending...
</span><span style="color:#75715e"></span>            BufferedReader reader <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BufferedReader<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> InputStreamReader<span style="color:#f92672">(</span>in<span style="color:#f92672">));</span>
            <span style="color:#75715e">// Read String Value
</span><span style="color:#75715e"></span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>reader<span style="color:#f92672">.</span><span style="color:#a6e22e">readLine</span><span style="color:#f92672">());</span>
            
            <span style="color:#75715e">// THEN CLOSE IT
</span><span style="color:#75715e"></span>            in<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
            out<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
            socketServer<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Ignored for Simplicity
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Free up Resources by CLOSING them
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>


</code></pre></div><h2 id="heading"></h2>
<p>You can try sending different string, or even multiple strings. Just use these methods and you are good to go&hellip;</p>
<h2 id="multi-client-network">Multi-client Network</h2>
<p>This is where threading comes in. A server might need to be connected to multiple client at the same time. To connect with other client, server must always <strong>listen</strong> using <code>server.accept()</code>, it is a <strong>BLOCKING</strong> function. So, to perform other actions with other connected clients, <strong>All clients must be in different threads from <code>server.accept()</code></strong>.</p>
<blockquote>
<p>**BLOCKING: **Example, <code>scanner.readLine()</code>, program will not proceed until input has been given. **Blocks **the program.</p>
</blockquote>
<p>To connect multiple client, we can use java <code>Therad</code> like below:</p>
<h3 id="current-code-3">Current Code</h3>
<p><code>Server.java</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> java.net.ServerSocket<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> java.net.Socket<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Server</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> PORT <span style="color:#f92672">=</span> 12345<span style="color:#f92672">;</span>
    
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        ServerSocket server <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
        Socket clientSocket <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
        <span style="color:#66d9ef">try</span><span style="color:#f92672">{</span>
        	server <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ServerSocket<span style="color:#f92672">(</span>PORT<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span>1<span style="color:#f92672">;</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
                clientSocket <span style="color:#f92672">=</span> server<span style="color:#f92672">.</span><span style="color:#a6e22e">accept</span><span style="color:#f92672">();</span>
                <span style="color:#66d9ef">new</span> Thread<span style="color:#f92672">(){</span>
                    Socket socket <span style="color:#f92672">=</span> clientSocket<span style="color:#f92672">;</span>
                    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Client #&#34;</span><span style="color:#f92672">+</span>i<span style="color:#e6db74">&#34; Connected&#34;</span><span style="color:#f92672">);</span>
            		<span style="color:#75715e">// DO YOUR WORK WITH SOCKET HERE
</span><span style="color:#75715e"></span>         		   	<span style="color:#75715e">// Getting I/O Stream
</span><span style="color:#75715e"></span>            		OutputStream out <span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span><span style="color:#a6e22e">getOutputSteam</span><span style="color:#f92672">();</span>
            		InputStream in <span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span><span style="color:#a6e22e">getInputSteam</span><span style="color:#f92672">();</span>
            
            		<span style="color:#75715e">// Simple String Value Sending...
</span><span style="color:#75715e"></span>        	    	BufferedWriter writer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BufferedWriter<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> OutputStreamWriter<span style="color:#f92672">(</span>out<span style="color:#f92672">));</span>
    	        	writer<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hello World from Server to Client #&#34;</span><span style="color:#f92672">+</span>i<span style="color:#f92672">);</span>
	            	writer<span style="color:#f92672">.</span><span style="color:#a6e22e">newLine</span><span style="color:#f92672">();</span>
            
            		<span style="color:#75715e">// THEN CLOSE IT
</span><span style="color:#75715e"></span>            		in<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
            		out<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
            		socket<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
                <span style="color:#f92672">}.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
            <span style="color:#f92672">}</span>
        	
            server<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Ignored for Simplicity
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Free up Resources by CLOSING them
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p><code>Client.java</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> java.net.Socket<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Client</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> PORT <span style="color:#f92672">=</span> 12345<span style="color:#f92672">;</span>
	
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    	<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
            Socket socketServer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Socket<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;127.0.0.1&#34;</span><span style="color:#f92672">,</span> PORT<span style="color:#f92672">);</span>
            <span style="color:#75715e">// DO YOUR WORK WITH SOCKET HERE
</span><span style="color:#75715e"></span>            
            <span style="color:#75715e">// Getting I/O Stream
</span><span style="color:#75715e"></span>            OutputStream out <span style="color:#f92672">=</span> socketClient<span style="color:#f92672">.</span><span style="color:#a6e22e">getOutputSteam</span><span style="color:#f92672">();</span>
            InputStream in <span style="color:#f92672">=</span> socketClient<span style="color:#f92672">.</span><span style="color:#a6e22e">getInputSteam</span><span style="color:#f92672">();</span>
            
            <span style="color:#75715e">// Simple Integer Value Sending...
</span><span style="color:#75715e"></span>            BufferedReader reader <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BufferedReader<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> InputStreamReader<span style="color:#f92672">(</span>in<span style="color:#f92672">));</span>
            <span style="color:#75715e">// Read String Value
</span><span style="color:#75715e"></span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>reader<span style="color:#f92672">.</span><span style="color:#a6e22e">readLine</span><span style="color:#f92672">());</span>
            
            <span style="color:#75715e">// THEN CLOSE IT
</span><span style="color:#75715e"></span>            in<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
            out<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
            socketServer<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Ignored for Simplicity
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// Free up Resources by CLOSING them
</span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>


</code></pre></div><h2 id="heading-1"></h2>
<p>Thats all for Today.</p>
<p><strong>Happy Coding</strong></p>
]]></content>
        </item>
        
        <item>
            <title>JavaFX Environment Setup</title>
            <link>https://MJKSabit.github.io/posts/javafx-environment-setup/</link>
            <pubDate>Sun, 05 Apr 2020 20:32:14 +0600</pubDate>
            
            <guid>https://MJKSabit.github.io/posts/javafx-environment-setup/</guid>
            <description>JavaFX Download JavaFX for 11, not for IntelliJ Bundled JDK
Windows and Linux Versions are different, one should not work on another.
Unzip JavaFX to your HDD
Go to Structure for New Projects
Add JavaFX to Global Library
Go to Preferences (or File -&amp;gt; Settings) -&amp;gt; Appearance &amp;amp; Behavior -&amp;gt;
Path Variables, and define the name of the variable as PATH_TO_FX, and browse to the lib folder of the JavaFX SDK to set its value, and click apply.</description>
            <content type="html"><![CDATA[<h2 id="javafx">JavaFX</h2>
<p>Download <a href="https://gluonhq.com/products/javafx/">JavaFX for 11</a>, not for IntelliJ Bundled JDK</p>
<p>Windows and Linux Versions are different, one should not work on another.</p>
<p>Unzip JavaFX to your HDD</p>
<p>Go to Structure for New Projects</p>
<p><img src="/img/java-environment/intellij-new-proj-struct.jpg" alt="New Project Structure" title="New Project Structure"></p>
<p>Add JavaFX to Global Library</p>
<p><img src="/img/java-environment/intellij-global-lib.jpg" alt="alt_text" title="Global Library"></p>
<p>Go to Preferences (or File -&gt; Settings) -&gt; Appearance &amp; Behavior -&gt;</p>
<p><img src="/img/java-environment/javafx-path.jpg" alt="IntelliJ Path" title="PATH_TO_JAVAFX">
Path Variables, and define the name of the variable as <strong>PATH_TO_FX</strong>, and browse to the lib folder of the JavaFX SDK to set its value, and click apply.</p>
<p>Create New JavaFX Project</p>
<p>Go to File -&gt; Project Structure -&gt; Global Libraries -&gt; JavaFX -&gt; Add to Module</p>
<p><img src="/img/java-environment/new-javafx-project.jpg" alt="JavaFX Project" title="New JavaFX Project"></p>
<p>Go to Run -&gt; Edit Configurations . . . and add these VM Options:</p>
<pre><code> --module-path ${PATH_TO_FX} --add-modules=javafx.base,javafx.controls,javafx.fxml,javafx.graphics,javafx.media,javafx.swing,javafx.web --add-opens javafx.base/com.sun.javafx.runtime=ALL-UNNAMED --add-opens javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED --add-opens javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED --add-opens javafx.base/com.sun.javafx.binding=ALL-UNNAMED --add-opens javafx.base/com.sun.javafx.event=ALL-UNNAMED --add-opens javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED
</code></pre><p>You’re ready to GO…</p>
<h3 id="scene-builder-setup">Scene Builder Setup</h3>
<p>Download <a href="https://gluonhq.com/products/scene-builder/">Scene Builder</a></p>
<p>Setup Scene Builder</p>
<p>Add Scene Builder to IntelliJ (Path to SceneBuilder)</p>
<p><img src="/img/java-environment/scene-builder.jpg" alt="Scene Buider" title="Scene Buider Path"></p>
<p>Ready To GO…</p>
<p>Md. Toki Tahmid suggested to use “<strong>Netbeans IDE</strong>” with Scene Builder</p>
]]></content>
        </item>
        
        <item>
            <title>Java Environment Setup</title>
            <link>https://MJKSabit.github.io/posts/java-environment-setup/</link>
            <pubDate>Sat, 04 Apr 2020 19:22:10 +0600</pubDate>
            
            <guid>https://MJKSabit.github.io/posts/java-environment-setup/</guid>
            <description>JDK and JRE Setup JRE not needed for Version &amp;gt; 10
Download Java LTS (Java 8, Java 11, …)
 Oracle JDK 11 Amazon Correto 11 Zulu (includes JavaFX auto in JDK11)  Intellij (&amp;gt;2019.1) comes with bundled JDK which includes JavaFX
Java Path Variable Setup Windows Go to “Advanced System Settings”:
Go to “Environment Variable”
Add New System Variable named “JAVA_HOME” where you have installed your JDK
Edit Path in System Variable and add the location where “javac.</description>
            <content type="html"><![CDATA[<h2 id="jdk-and-jre-setup">JDK and JRE Setup</h2>
<p>JRE not needed for Version &gt; 10</p>
<p>Download Java LTS (Java 8, Java 11, …)</p>
<ul>
<li><a href="https://www.oracle.com/java/technologies/javase-jdk11-downloads.html">Oracle JDK 11</a></li>
<li><a href="https://corretto.aws/downloads/latest/amazon-corretto-11-x64-windows-jdk.msi">Amazon Correto 11</a></li>
<li><a href="https://www.azul.com/downloads/zulu-community/">Zulu</a> (includes JavaFX auto in JDK11)</li>
</ul>
<p>Intellij (&gt;2019.1) comes with bundled JDK which includes JavaFX</p>
<h2 id="java-path-variable-setup">Java Path Variable Setup</h2>
<h3 id="windows">Windows</h3>
<p>Go to “<strong>Advanced System Settings</strong>”:</p>
<p><img src="/img/java-environment/adv_sys.jpg" alt="Start Menu" title="Advanced System Settings from Start Menu"></p>
<p>Go to “<strong>Environment Variable</strong>”</p>
<p><img src="/img/java-environment/env-var.jpg" alt="Envirnmement Variable" title="Envirnmement Varriable"></p>
<p>Add New System Variable named “<strong>JAVA_HOME</strong>” where you have installed your JDK</p>
<p><img src="/img/java-environment/java-home.jpg" alt="Java Home" title="JAVA_HOME"></p>
<p>Edit <strong>Path</strong> in <strong><!-- raw HTML omitted -->System Variable<!-- raw HTML omitted --></strong> and add the location where “<strong>javac.exe</strong>” is located</p>
<p><img src="/img/java-environment/path-var.jpg" alt="Path Variable" title="Path Variable"></p>
<h3 id="linux">Linux</h3>
<p>Check if Java is installed</p>
<pre><code>javac --version
</code></pre><p>Else install from debian Packages or APT</p>
<p>JAVA_HOME Setup using</p>
<pre><code>export JAVA_HOME= /usr/java/jdk1.7.0_05/
</code></pre><p>PATH Setup using</p>
<pre><code>export PATH=${PATH}:${JAVA_HOME}/bin
</code></pre><p>Select which Java Version to use</p>
<pre><code>sudo update-alternatives --config java
</code></pre><h2 id="intellij-setup">IntelliJ Setup</h2>
<p><!-- raw HTML omitted -->IntelliJ Idea Community Edition:<!-- raw HTML omitted --> Just Download and Install.</p>
<p><!-- raw HTML omitted -->IntelliJ Idea Ultimate Edition:<!-- raw HTML omitted --> for free,</p>
<ol>
<li>
<p>Open <a href="https://account.jetbrains.com/login">JetBrains Account</a></p>
</li>
<li>
<p><a href="https://www.jetbrains.com/community/education/#students">Apply Now</a> for students, Use your BUET email to verify</p>
</li>
</ol>
<p><img src="/img/java-environment/intelij-buet.jpg" alt="alt_text" title="BUET Mail With IntelliJ"></p>
<ol start="3">
<li>
<p>Checkout <a href="https://account.jetbrains.com/licenses">Licence Page</a></p>
</li>
<li>
<p>Download <a href="https://www.jetbrains.com/idea/download/#section=windows">IntelliJ Ultimate</a></p>
</li>
<li>
<p>Install and Run. You&rsquo;ll be asked for Licence or 14 days trial. Log in with your account and Use IntelliJ Idea Ultimate for free</p>
</li>
</ol>
<blockquote>
<p>You have to apply for renewal of your licence every year, you will get an E-mail 14 days before expiration</p>
</blockquote>
<blockquote>
<p><a href="https://intellij-support.jetbrains.com/hc/en-us/articles/206544879-Selecting-the-JDK-version-the-IDE-will-run-under">IntelliJ with Bundled JDK</a></p>
</blockquote>
<p>Configure JDK with IntelliJ:</p>
<p>Go to Structure for New Projects</p>
<p><img src="/img/java-environment/intellij-project-struct.jpg" alt="Project Structure" title="Project Structure"></p>
<p>Select New JDK if there isn’t one</p>
<p><strong>Intellij (&gt;2019.1) comes with bundled JDK</strong> which includes JavaFX</p>
<p><img src="/img/java-environment/intellij-jdk.jpg" alt="JDK Select" title="Select JDK"></p>
<p>And Select the directory where you installed JDK.</p>
<p>You’re ready to go&hellip;</p>
<h2 id="java-exporting-executable-files">Java Exporting Executable Files</h2>
<p>Go to: File &gt; Project Structure &gt; Artifacts</p>
<p><img src="/img/java-environment/artifacts.png" alt="Artifacts" title="Jar Artifacts"></p>
<p>Add + Jar &gt; From Modules with Dependencies… &gt; Select Main Class</p>
<p><img src="/img/java-environment/new-jar-build.png" alt="Build Jar" title="New JAR Build"></p>
<p>Go to Build &gt; Build Artifacts, It will create a new Jar File</p>
<p>To run .jar Files:</p>
<pre><code>java -jar my_jar.jar
</code></pre><p>To run .jar with JAVA_FX Dependencies:</p>
<!-- raw HTML omitted -->
<pre><code>java --module-path PATH_TO_JAVAFX/lib --add-modules=javafx.base,javafx.controls,javafx.fxml,javafx.graphics,javafx.media,javafx.swing,javafx.web --add-opens javafx.base/com.sun.javafx.runtime=ALL-UNNAMED --add-opens javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED --add-opens javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED --add-opens javafx.base/com.sun.javafx.binding=ALL-UNNAMED --add-opens javafx.base/com.sun.javafx.event=ALL-UNNAMED --add-opens javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED -jar messenger-client-gui.jar
</code></pre><!-- raw HTML omitted -->
]]></content>
        </item>
        
    </channel>
</rss>
